//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Configs/TestProjectControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestProjectControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestProjectControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestProjectControls"",
    ""maps"": [
        {
            ""name"": ""TestProjectMap"",
            ""id"": ""bcd81803-8fb2-457b-ac5d-4eeebc90dea1"",
            ""actions"": [
                {
                    ""name"": ""PcDirectionUp"",
                    ""type"": ""Button"",
                    ""id"": ""20558cdd-dbe2-46c4-98cd-c0c9af2568a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PcDirectionDown"",
                    ""type"": ""Button"",
                    ""id"": ""18d94021-974c-4783-9958-fc9780b8204b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PcDirectionLeft"",
                    ""type"": ""Button"",
                    ""id"": ""34d6c2a4-ffa6-4fa7-b127-6efe1294771e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PcDirectionRight"",
                    ""type"": ""Button"",
                    ""id"": ""f6db34f8-1a3d-41fc-8969-abed5d026a56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""a799ed41-3656-4531-959b-cb8cb312f2b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""07bcb48b-f785-4f4c-a931-1582c0738e19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextSpell"",
                    ""type"": ""Button"",
                    ""id"": ""0bdcf72b-e97d-480e-b950-a3a289e968fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevSpell"",
                    ""type"": ""Button"",
                    ""id"": ""b1d8ad79-6a3e-419d-8c5c-e95e6ab856d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e734ccc6-883e-4007-852a-079547a20bcc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PcDirectionUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66b0e811-9831-4652-8c76-8de2382b48da"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PcDirectionDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09c65ece-f1e2-47ed-b82d-60867b626bc9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PcDirectionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c08ac7c7-6d61-46f2-9042-40844411bc6b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PcDirectionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331ed1ea-00cb-482a-a388-ab61fb185775"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83d583e5-8047-41bb-a109-dd46c663fea3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b98a7bff-bdff-4374-8824-334089bb4416"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""080d0399-153b-4750-af5b-c167674c997b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TestProjectMap
        m_TestProjectMap = asset.FindActionMap("TestProjectMap", throwIfNotFound: true);
        m_TestProjectMap_PcDirectionUp = m_TestProjectMap.FindAction("PcDirectionUp", throwIfNotFound: true);
        m_TestProjectMap_PcDirectionDown = m_TestProjectMap.FindAction("PcDirectionDown", throwIfNotFound: true);
        m_TestProjectMap_PcDirectionLeft = m_TestProjectMap.FindAction("PcDirectionLeft", throwIfNotFound: true);
        m_TestProjectMap_PcDirectionRight = m_TestProjectMap.FindAction("PcDirectionRight", throwIfNotFound: true);
        m_TestProjectMap_MousePosition = m_TestProjectMap.FindAction("MousePosition", throwIfNotFound: true);
        m_TestProjectMap_CastSpell = m_TestProjectMap.FindAction("CastSpell", throwIfNotFound: true);
        m_TestProjectMap_NextSpell = m_TestProjectMap.FindAction("NextSpell", throwIfNotFound: true);
        m_TestProjectMap_PrevSpell = m_TestProjectMap.FindAction("PrevSpell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestProjectMap
    private readonly InputActionMap m_TestProjectMap;
    private List<ITestProjectMapActions> m_TestProjectMapActionsCallbackInterfaces = new List<ITestProjectMapActions>();
    private readonly InputAction m_TestProjectMap_PcDirectionUp;
    private readonly InputAction m_TestProjectMap_PcDirectionDown;
    private readonly InputAction m_TestProjectMap_PcDirectionLeft;
    private readonly InputAction m_TestProjectMap_PcDirectionRight;
    private readonly InputAction m_TestProjectMap_MousePosition;
    private readonly InputAction m_TestProjectMap_CastSpell;
    private readonly InputAction m_TestProjectMap_NextSpell;
    private readonly InputAction m_TestProjectMap_PrevSpell;
    public struct TestProjectMapActions
    {
        private @TestProjectControls m_Wrapper;
        public TestProjectMapActions(@TestProjectControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PcDirectionUp => m_Wrapper.m_TestProjectMap_PcDirectionUp;
        public InputAction @PcDirectionDown => m_Wrapper.m_TestProjectMap_PcDirectionDown;
        public InputAction @PcDirectionLeft => m_Wrapper.m_TestProjectMap_PcDirectionLeft;
        public InputAction @PcDirectionRight => m_Wrapper.m_TestProjectMap_PcDirectionRight;
        public InputAction @MousePosition => m_Wrapper.m_TestProjectMap_MousePosition;
        public InputAction @CastSpell => m_Wrapper.m_TestProjectMap_CastSpell;
        public InputAction @NextSpell => m_Wrapper.m_TestProjectMap_NextSpell;
        public InputAction @PrevSpell => m_Wrapper.m_TestProjectMap_PrevSpell;
        public InputActionMap Get() { return m_Wrapper.m_TestProjectMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestProjectMapActions set) { return set.Get(); }
        public void AddCallbacks(ITestProjectMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TestProjectMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestProjectMapActionsCallbackInterfaces.Add(instance);
            @PcDirectionUp.started += instance.OnPcDirectionUp;
            @PcDirectionUp.performed += instance.OnPcDirectionUp;
            @PcDirectionUp.canceled += instance.OnPcDirectionUp;
            @PcDirectionDown.started += instance.OnPcDirectionDown;
            @PcDirectionDown.performed += instance.OnPcDirectionDown;
            @PcDirectionDown.canceled += instance.OnPcDirectionDown;
            @PcDirectionLeft.started += instance.OnPcDirectionLeft;
            @PcDirectionLeft.performed += instance.OnPcDirectionLeft;
            @PcDirectionLeft.canceled += instance.OnPcDirectionLeft;
            @PcDirectionRight.started += instance.OnPcDirectionRight;
            @PcDirectionRight.performed += instance.OnPcDirectionRight;
            @PcDirectionRight.canceled += instance.OnPcDirectionRight;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @CastSpell.started += instance.OnCastSpell;
            @CastSpell.performed += instance.OnCastSpell;
            @CastSpell.canceled += instance.OnCastSpell;
            @NextSpell.started += instance.OnNextSpell;
            @NextSpell.performed += instance.OnNextSpell;
            @NextSpell.canceled += instance.OnNextSpell;
            @PrevSpell.started += instance.OnPrevSpell;
            @PrevSpell.performed += instance.OnPrevSpell;
            @PrevSpell.canceled += instance.OnPrevSpell;
        }

        private void UnregisterCallbacks(ITestProjectMapActions instance)
        {
            @PcDirectionUp.started -= instance.OnPcDirectionUp;
            @PcDirectionUp.performed -= instance.OnPcDirectionUp;
            @PcDirectionUp.canceled -= instance.OnPcDirectionUp;
            @PcDirectionDown.started -= instance.OnPcDirectionDown;
            @PcDirectionDown.performed -= instance.OnPcDirectionDown;
            @PcDirectionDown.canceled -= instance.OnPcDirectionDown;
            @PcDirectionLeft.started -= instance.OnPcDirectionLeft;
            @PcDirectionLeft.performed -= instance.OnPcDirectionLeft;
            @PcDirectionLeft.canceled -= instance.OnPcDirectionLeft;
            @PcDirectionRight.started -= instance.OnPcDirectionRight;
            @PcDirectionRight.performed -= instance.OnPcDirectionRight;
            @PcDirectionRight.canceled -= instance.OnPcDirectionRight;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @CastSpell.started -= instance.OnCastSpell;
            @CastSpell.performed -= instance.OnCastSpell;
            @CastSpell.canceled -= instance.OnCastSpell;
            @NextSpell.started -= instance.OnNextSpell;
            @NextSpell.performed -= instance.OnNextSpell;
            @NextSpell.canceled -= instance.OnNextSpell;
            @PrevSpell.started -= instance.OnPrevSpell;
            @PrevSpell.performed -= instance.OnPrevSpell;
            @PrevSpell.canceled -= instance.OnPrevSpell;
        }

        public void RemoveCallbacks(ITestProjectMapActions instance)
        {
            if (m_Wrapper.m_TestProjectMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestProjectMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TestProjectMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestProjectMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestProjectMapActions @TestProjectMap => new TestProjectMapActions(this);
    public interface ITestProjectMapActions
    {
        void OnPcDirectionUp(InputAction.CallbackContext context);
        void OnPcDirectionDown(InputAction.CallbackContext context);
        void OnPcDirectionLeft(InputAction.CallbackContext context);
        void OnPcDirectionRight(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnCastSpell(InputAction.CallbackContext context);
        void OnNextSpell(InputAction.CallbackContext context);
        void OnPrevSpell(InputAction.CallbackContext context);
    }
}
